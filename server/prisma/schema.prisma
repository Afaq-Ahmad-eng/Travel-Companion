generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  user_id            Int                 @id @default(autoincrement())
  user_name          String              @unique(map: "user_name") @db.VarChar(300)
  user_email         String              @unique(map: "user_email") @db.VarChar(300)
  user_phoneno       String              @db.VarChar(30)
  user_interest      String              @db.VarChar(200)
  user_location      String              @db.VarChar(200)
  user_password      String              @db.VarChar(300)
  user_joined        DateTime            @default(now()) @db.Timestamp(0)
  user_updatedAt     DateTime            @default(now()) @db.Timestamp(0)
  user_status        user_user_status    @default(active)
  user_role          user_user_role      @default(user)
  share_experiences  share_experiences[]
  user_refresh_token user_refresh_token?
}

model user_refresh_token {
  token_id      Int    @id @default(autoincrement())
  user_id       Int    @unique(map: "user_id")
  refresh_token String @db.VarChar(250)
  user          user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_user_refresh_token_user_id")
}

model experience_images {
  id                Int               @id @default(autoincrement())
  experience_id     Int
  image_url         String            @db.Text
  share_experiences share_experiences @relation(fields: [experience_id], references: [experience_id], onDelete: Cascade, onUpdate: Restrict, map: "experience_images_ibfk_1")

  @@index([experience_id], map: "experience_images_ibfk_1")
}

model share_experiences {
  experience_id     Int                 @id @default(autoincrement())
  user_id           Int
  title             String              @unique(map: "unique_title") @db.VarChar(255)
  description       String              @db.Text
  blog              String?             @db.LongText
  rating            Decimal             @db.Decimal(2, 1)
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  updated_at        DateTime            @default(now()) @db.Timestamp(0)
  experience_images experience_images[]
  user              user                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "share_experiences_ibfk_1")

  @@index([user_id], map: "user_id")
}

enum user_user_status {
  active
  admin
  pending
}

enum user_user_role {
  admin
  user
  moderator
  pending
}
